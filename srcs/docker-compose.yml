# https://docs.docker.com/compose/compose-file/compose-file-v3/

version: '3'

# https://docs.docker.com/compose/compose-file/compose-file-v3/#build
# https://docs.docker.com/compose/compose-file/compose-file-v3/#context
# https://docs.docker.com/compose/compose-file/compose-file-v3/#args
# https://docs.docker.com/compose/compose-file/compose-file-v3/#container_name
# https://docs.docker.com/compose/compose-file/compose-file-v3/#depends_on
# https://docs.docker.com/compose/compose-file/compose-file-v3/#env_file
# https://docs.docker.com/compose/compose-file/compose-file-v3/#networks
# https://docs.docker.com/compose/compose-file/compose-file-v3/#ports
# https://docs.docker.com/compose/compose-file/compose-file-v3/#restart
# https://docs.docker.com/compose/compose-file/compose-file-v3/#volumes

services:
  mariadb:
    build:
      context: requirements/mariadb
      args:
        - DB_NAME
        - MYSQL_ROOT_PWD
        - MYSQL_BOSS_PWD
        - MYSQL_USERNAME
        - MYSQL_USER_PWD
    container_name: mariadb
    image: mariadb:inception
    env_file:
      - .env
    networks:
      - inception
    restart: unless-stopped
    volumes:
      - mariadb_volume:/var/lib/mysql

  wordpress:
    build:
      context: requirements/wordpress
      args:
        - DB_NAME
        - DB_HOST
        - WP_PATH
        - WP_USER
        - WP_UPWD
    container_name: wordpress
    image: wordpress:inception
    depends_on:
      - mariadb
    env_file:
      - .env
    networks:
      - inception
    restart: unless-stopped
    volumes:
      - wordpress_volume:/var/www/wordpress

  nginx:
    build: requirements/nginx
    container_name: nginx
    image: nginx:inception
    networks:
      - inception
    ports:
      - "443:443"
    restart: unless-stopped
    volumes:
      - wordpress_volume:/var/www/wordpress

# https://docs.docker.com/compose/compose-file/compose-file-v3/#network-configuration-reference

networks:
  inception:

# https://docs.docker.com/compose/compose-file/compose-file-v3/#volume-configuration-reference
# https://blog.code4hire.com/2018/06/define-named-volume-with-host-mount-in-the-docker-compose-file/

volumes:
  mariadb_volume:
    driver: local
    driver_opts:
      type: none
      o: 'bind'
      device: /home/opacaud/data/mariadb
  wordpress_volume:
    driver: local
    driver_opts:
      type: none
      o: 'bind'
      device: /home/opacaud/data/wordpress




#######################
#                     #
#   COMMAND SUMMARY   #
#                     #
#######################

# LIST CONTAINERS

# docker ps -a

# -----------------------------------------

# LIST IMAGES

# docker image ls

# -----------------------------------------

# SEE HISTORY IMAGE

# docker history image_ID

# -----------------------------------------

# CREATE AND/OR LAUNCH A CONTAINER

# docker create --name container_name image:version
# docker start container_name

# or

# docker run -tid (tty interactive detach) -p 8080(container):80(localhost) --name container_name image:version

# -----------------------------------------

# INSPECT A CONTAINER

# docker inspect container_name

# -----------------------------------------

# EXECUTE A CONTAINER

# docker exec -ti (tty) container_name sh (shell, app to run once container started)

# -----------------------------------------

# DELETE A CONTAINER

# docker rm -f container_name

# -----------------------------------------

# CREATE A VOLUME DIRECTLY IN A RUN COMMAND AND CHOOSE THE MOUNT POINT IN HOST

# docker run -tid -p 8080:80 -v /srv/data/nginx/to/share/on/host:/usr/share/nginx/html/to/share/in/container --name container_name image:version

# (Meme si le container container_name est suppr, si on le recree avec les memes volumes, ca refonctionnera.)

# -----------------------------------------

# HANDLE VOLUMES

# docker volume create/inspect/ls/prune/rm

# docker volume create myvolume
# docker run -tid -p 8080:80 --name container_name --mount source=myvolume/created/on/host,target=/usr/share/nginx/html/in/container nginx:latest
# (volume on host can be found with docker volume inspect myvolume)

# docker rm -f container_name
# (mandatory to delete)

# docker volume rm myvolume

# -----------------------------------------

# ENV VARIABLES

# docker run -tid --name container_name --env MYVARIABLE="123456" image:version

# docker run -tid --name container_name --env-file filename image:version

# docker run -tid --name container_name --hostname chosen_hostname image:version

# -----------------------------------------

# CREATE AN IMAGE FROM A CONTAINER

# docker exec -ti container_name app_to_start

# docker commit -m "message" container_ID container_name:version (ex: xavki:v1.0)

# -----------------------------------------

# DELETE AN IMAGE

# docker rm -f container_name (using the image)

# docker image rm image_ID

# -----------------------------------------

# CREATE AN IMAGE FROM A DOCKERFILE (AND DELETE IT)

# FROM image:version
# RUN cmd arg

# docker build -t image_name:v1.0 .

# docker rm -f container_name (using the image)

# docker rmi image_name

# -----------------------------------------

# DOCKER COMPOSE COMMANDS

# docker-compose build

# docker-compose up (= build + run)

# docker-compose up -d (detached mode)

# docker-compose ps (state of services)

# docker-compose start (starts of services)

# docker-compose stop (stops of services)

# docker-compose rm

# docker-compose scale service_name=3 (launches 3 instances)

# docker-compose pull (updates images)

# docker-compose logs
